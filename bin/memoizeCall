#!/bin/bash
shopt -qs extglob

: ${MEMOIZECALL_COMMAND_JOINER=;}

printUsage()
{
    cat <<HELPTEXT
If COMMAND (SUBJECT if passed) has not yet been executed (within
VALID-TIMESPAN|TIMESLOT), execute it and record its exit status and output (but
not error messages, --successful-only skips recording for failed commands so
that the next invocation will retry) for later recalls (of the same COMMAND /
SUBJECT [/ GROUP]).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-t|--for VALID-TIMESPAN[SUFFIX]|second|minute|hour|day|week|month|year|every N (seconds|minutes|hours|days|weeks)] [--timestamp EPOCH] [--successful-only] [-g|--memoize-group GROUP] [-s|--subject SUBJECT] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" '[...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}

validity=
isSuccessfulOnly=
group=
subject=
commands=
isFromStandardIn=
typeset -a executionMarkerArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printUsage "$0"; exit 0;;
	--for|-t)		shift; validity="$1"; shift;;
	--timestamp)		executionMarkerArgs+=("$1" "$2"); shift; shift;;
	--successful-only)	shift; isSuccessfulOnly=t;;
	--memoize-group|-g)	shift; group="$1"; shift;;
	--subject|-s)		shift; subject="$1"; shift;;
	--command|-c)		shift; commands+="${commands:+ $MEMOIZECALL_COMMAND_JOINER }$1"; shift;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $MEMOIZECALL_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$commands" ]; then
    isFromStandardIn=t
    commands="$(< /dev/stdin)"
fi
if [ -z "$commands" ]; then
    echo >&2 'ERROR: No COMMAND.'
    echo >&2
    printUsage "$0" >&2
    exit 2
fi

[ "$subject" ] || subject="$commands"
if [ "$group" ]; then
    executionMarkerArgs+=(--namespace memoizeCall.d --group "$group")
else
    executionMarkerArgs+=(--group memoizeCall)
fi
marker()
{
    executionMarker --base-type data "${executionMarkerArgs[@]}" "$@"
}

if context="$(marker --query "$subject" ${validity:+--within "$validity"} --get-context)"; then
    exitStatus="${context%% *}"
    output="${context#* }"
    [ "$output" ] && printf '%s\n' "$output"
    exit $exitStatus
fi


output="$(
    if [ "$isFromStandardIn" ]; then
	printf %s "$commands" | bash -
    else
	eval "$commands"
    fi
)"
exitStatus=$?
[ "$output" ] && printf '%s\n' "$output"

[ $exitStatus -ne 0 -a -n "$isSuccessfulOnly" ] && exit $exitStatus
marker --update "$subject" --context "$exitStatus $output"
exit $exitStatus
