#!/bin/bash
shopt -qs extglob

: ${MEMOIZEFILE_COMMAND_JOINER=;}
: ${MEMOIZEFILE_FILE_MARKER='{}'}
fileMarker="$MEMOIZEFILE_FILE_MARKER"; unset MEMOIZEFILE_FILE_MARKER

printShortUsage()
{
    local commonArgs='[-v|--verbose] -f|--file FILE [-t|--timeout|--for VALID-TIMESPAN[SUFFIX]] [-T|--timestamp EPOCH]'

    printf 'Usage: cat SOURCE-FILE [...] | %q %s\n' "$(basename "$1")" "$commonArgs"
    echo
    printf 'Usage: %q %s %s\n' "$(basename "$1")" "$commonArgs" '[-r|--redirect] [--tee] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
If FILE does not exist or its last modification is older than VALID-TIMESPAN,
execute COMMAND / take the input from standard input to update the FILE.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --verbose|-v	Print additional information about the FILE state.
    --file|-f FILE	The target filespec to check and potentially update.
    --timeout|-t|--for VALID-TIMESPAN[SUFFIX]
			If the last modification of FILE is older, execute
			COMMAND to update the FILE. VALID-TIMESPAN is
			NUMBER[SUFFIX], where SUFFIX may be 's' for seconds (the
			default), 'm' for minutes, 'h' for hours, 'd' for days,
			'w' for weeks, 'mo' for months, 'y' for years, 'g' for
			generations.
    --redirect|-r	Directly redirect standard output of COMMAND into FILE
			(if the command succeeds). Saves you from including the
			redirection in COMMANDLINE and makes it possible to use
			SIMPLECOMMAND.
    --tee		Also output the input / the updated FILE contents.
			This saves you from reading the FILE yourself (and may
			get you latest standard input not yet memoized in the
			FILE).
    --timestamp|-T EPOCH
			Use EPOCH instead of the current time.
    --command|-c CMD	The command line to be executed to update the FILE (as a
			side effect, or by redirecting its output into it). When
			this is a simple command, it can also be passed as such.
			${fileMarker:+Inside CMD, $fileMarker is replaced with FILE (so that you do not
			need to specify it twice).}
EXIT STATUS:
    0	FILE exists (and is recent enough), or had to be updated and that
	succeeded.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	The COMMAND did not update the FILE as a side effect.
    *	Any error from COMMAND is returned as-is.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '--file ~/.cache/blogfeed --for 1d -- wget https://ingo-karkat.de/blog/feed -o ~/.cache/blogfeed'
}

isTee=
teeContents() { :; }
isVerbose=
file=
validity=
isRedirect=
now=
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--verbose|-v)	shift; isVerbose=t;;
	--file|-f)	shift; file="$1"; shift;;
	--timeout|-t|--for)
			shift
			case "$1" in
			    +([0-9])?(s))   validity="${1%s}";;
			    +([0-9])m)	    validity=$((${1%m} * 60));;
			    +([0-9])h)	    validity=$((${1%h} * 3600));;
			    +([0-9])d)	    validity=$((${1%d} * 86400));;
			    +([0-9])w)	    validity=$((${1%w} * 86400 * 7));;
			    +([0-9])mo)	    validity=$((${1%mo} * 86400 * 30));;
			    +([0-9])y)	    validity=$((${1%y} * 86400 * 365));;
			    +([0-9])g)	    validity=$((${1%g} * 86400 * 9131));;
			    *)		    printf >&2 'ERROR: Illegal timespan: %s\n' "$1"; exit 2;;
			esac
			shift
			;;
	--redirect|-r)	shift; isRedirect=t;;
	--tee)		shift; isTee=t; teeContents() { cat -- "${1:?}" || exit 3; };;
	--timestamp|-T)	shift; now="$1"; shift;;
	--command|-c)	shift; commands+="${commands:+ $MEMOIZEFILE_COMMAND_JOINER }$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    printf -v escapedFileMarker %q "$fileMarker"
    commands+="${commands:+ $MEMOIZEFILE_COMMAND_JOINER }${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
fi
if [ -z "$file" ]; then
    echo 'ERROR: No FILE passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2


update()
{
    local quotedFile; printf -v quotedFile %q "$file"
    local interpolatedCommands="${commands//"$fileMarker"/$quotedFile}"
    eval "$interpolatedCommands"
}
getModificationEpoch()
{
    stat --dereference --format %Y "${1:?}"
}


needsUpdate=
fileModificationEpoch=-1
if [ -e "$file" ]; then
    if [ -n "$validity" ]; then
	[ -n "$now" ] || now="$(date +%s)" || exit 3
	fileModificationEpoch="$(getModificationEpoch "$file")" || exit 3

	[ $((fileModificationEpoch + validity)) -ge "$now" ] || needsUpdate=t

	[ "$isVerbose" ] && if [ "$needsUpdate" ]; then
	    printf >&2 '%s needs an update; last update was %d second(s) ago.\n' "$file" "$((now - fileModificationEpoch))"
	else
	    printf >&2 '%s does not need an update yet; last update was %d second(s) ago.\n' "$file" "$((now - fileModificationEpoch))"
	fi
    else
	[ "$isVerbose" ] && printf >&2 '%s already exists.\n' "$file"
    fi
else
    needsUpdate=t
    [ "$isVerbose" ] && printf >&2 '%s does not exist yet.\n' "$file"
fi

if [ -z "$commands" ]; then
    if [ ! "$needsUpdate" ]; then
	if [ "$isTee" ]; then
	    exec cat
	else
	    exec cat >/dev/null 2>&1
	fi
    fi

    commands='cat > "$file"'
    isRedirect=''   # Not needed when reading from standard input; silently ignore instead of complaining.
fi
if [ ! "$needsUpdate" ]; then
    teeContents "$file"
    exit 0
fi


if [ "$isRedirect" ]; then
    TMPFILE="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
    cleanup()
    {
	rm -f -- "$TMPFILE" 2>/dev/null
    }
    [ "${DEBUG:-}" ] || trap 'cleanup' EXIT

    update > "$TMPFILE"; status=$?
    if [ $status -eq 0 ]; then
	teeContents "$TMPFILE"
	cp --force -- "$TMPFILE" "$file" || exit 3
    else
	teeContents "$file"
	exit $status
    fi
else
    update; status=$?
    teeContents "$file"
    [ $status -eq 0 ] || exit $status

    if [ ! -e "$file" ] || [ "$fileModificationEpoch" -eq "$(getModificationEpoch "$file")" ]; then
	# FILE was not created / updated as a side effect of COMMAND.
	[ "$isVerbose" ] && printf >&2 'ERROR: %s was not updated as a side effect of executing COMMAND.\n' "$file"
	exit 4
    fi
fi
